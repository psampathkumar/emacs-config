The Purpose of this type of org-mode configuration is to 
be able to easily turn on and off the various modes with the comment button 
infront of the mode. Care is taken to keep different parts operating independently.


TODO:
    - Refactor Code using =use-package=
    - Set priority for package sources
    - Auto Update
    - Improve code folding =origami.el= or =vimish-fold=
    - [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][Python IDE]]
    - write-good
    - [[https://stackoverflow.com/questions/2081577/setting-emacs-to-split-buffers-side-by-side][Split Buffer Horizontally]]
    - Fix Company AUTEX or use RevTex backend instead
    - Fix company-yas [[https://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer][SO Answer]]
    - File open shortcuts ?
    - Split each package to different headings and link to the github repo
    - Tabnine
FONT TEST:
    normal
    =emph=
    ~code~
    *bold*
    /italics/
    _uline_
    +strike+
* Autodownload/update package emacs
#+BEGIN_SRC emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
    (use-package auto-package-update
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-at-time "03:00")
      (setq auto-package-update-prompt-before-update t)
      (setq auto-package-update-show-preview t)
      (auto-package-update-maybe)
    )
#+END_SRC
* Magit and hl-diff
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init (setq git-commit-summary-max-length 50)
  )
  (use-package diff-hl
    :init 
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
      (global-diff-hl-mode)
  )
#+END_SRC
* Evil Mode
** Enable Evil Mode 
The only reason I even began to consider using emacs was this super awesome mode.
#+BEGIN_SRC emacs-lisp
; Use evil mode
(use-package evil
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC
** Evil Collection
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC
** Evil Quickscope
   inspired from vim-quickscope, Highlight letters whenever you press "f" to quickly spot places to jump to
#+BEGIN_SRC emacs-lisp
(use-package evil-quickscope
  :after evil
  :config (global-evil-quickscope-mode 1)
  ;(add-hook 'python-mode-hook 'turn-on-evil-quickscope-always-mode)
)
#+END_SRC
** Relative Numbers
If I'm using EVIL. Why not make the best setting on VIM work
#+BEGIN_SRC emacs-lisp
;Relative Numbers
(use-package linum-relative
:diminish linum-relative-mode
:config
    (add-hook 'find-file-hook
        (lambda ()
    ;    (global-display-line-numbers-mode)
        (linum-relative-global-mode t)
        (set-cursor-color "#ffffff")
        ))
    (setq linum-relative-current-symbol "")
)
#+END_SRC
** Nerd COmmenter and Leader
   #+BEGIN_SRC emacs-lisp
   (use-package evil-leader
   :config
    (global-evil-leader-mode)
    (evil-leader/set-key
    "ci" 'evilnc-comment-or-uncomment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cc" 'evilnc-copy-and-comment-lines
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    "cr" 'comment-or-uncomment-region
    "cv" 'evilnc-toggle-invert-comment-line-by-line
    "."  'evilnc-copy-and-comment-operator
    "\\" 'evilnc-comment-operator ; if you prefer backslash key
    )
   )
   #+END_SRC
** COMMENT Hard Mode Practice    
    Disabling arrow keys for myself. I want to practice the vim keybindings.
    #+BEGIN_SRC emacs-lisp
    (define-minor-mode hard-mode
    "Overrides all major and minor mode keys" t)

    (defvar hard-mode-map (make-sparse-keymap "hard-mode-map")
    "Override all major and minor mode keys")

    (add-to-list 'emulation-mode-map-alists
    `((hard-mode . ,hard-mode-map)))

    (define-key hard-mode-map (kbd "<left>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: h for Left")))

    (define-key hard-mode-map (kbd "<right>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: l for Right")))

    (define-key hard-mode-map (kbd "<up>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: k for Up")))

    (define-key hard-mode-map (kbd "<down>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: j for Down")))
    
    (evil-make-intercept-map hard-mode-map)
    #+END_SRC
    
* Python Mode
** Enable Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy

;:bind
;(:map elpy-mode-map
        ;("C-M-n" . elpy-nav-forward-block)
        ;("C-M-p" . elpy-nav-backward-block)
;)
;; :hook (
;;        (elpy-mode . (lambda ()
;;                         (set (make-local-variable 'company-backends)
;;                             '((elpy-company-backend :with company-yasnippet))
;;                          )
;;                      )
;;         )
;;      )
:config
    (elpy-enable)
    ;keep the backend as jedi
    (setq elpy-rpc-backend "jedi")  
    ; Set PATH
    (setq elpy-rpc-python-command "/usr/bin/python")
    ;(with-eval-after-load 'python
        ;(defun python-shell-completion-native-try ()
        ;"Return non-nil if can trigger native completion."
        ;(let ((python-shell-completion-native-enable t)
        ;(python-shell-completion-native-output-timeout
        ;python-shell-completion-native-try-output-timeout))
        ;(python-shell-completion-native-get-completions
        ;(get-buffer-process (current-buffer))
        ;nil "_"))))
;    (setq python-shell-completion-native-enable nil)
)
#+END_SRC
** Run black before saving
#+BEGIN_SRC emacs-lisp
(add-hook 'elpy-mode-hook (lambda ()
                            (add-hook 'before-save-hook
                                      'elpy-black-fix-code nil t)))
#+END_SRC
** Certain Important Hooks TO CHANGE
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'electric-pair-mode)
;(add-hook 'python-mode-hook
;          (lambda ()
;            (define-key python-mode-map "\"" 'electric-pair)
;            (define-key python-mode-map "\'" 'electric-pair)
;            (define-key python-mode-map "(" 'electric-pair)
;            (define-key python-mode-map "[" 'electric-pair)
;            (define-key python-mode-map "{" 'electric-pair)))
#+END_SRC
* My Tmux functionality here too
    #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c \\") 'split-window-right)
(global-set-key (kbd "C-c -") 'split-window-below)
#+END_SRC
* Company mode
    #+BEGIN_SRC emacs-lisp
    (use-package company
        :diminish company-mode
        :init
        (global-company-mode)
        :config
        ;; set default `company-backends'
        (use-package company-dict)
        (setq company-backends
            '(
                (company-yasnippet)
                (
                company-files          ; files & directory
                company-dict       ; keywords
                company-capf
                company-ispell
                company-semantic
                )  ; completion-at-point-functions
                (company-abbrev company-dabbrev)
                (company-math-symbols-unicode)
            )
        )
        (use-package company-statistics
        :config
        (company-statistics-mode)
        )
        (use-package company-quickhelp
        :config
        (company-quickhelp-mode)
        )

        (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
        (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)

        (setq company-auto-complete t)

        (defun my-company-visible-and-explicit-action-p ()
        (and (company-tooltip-visible-p)
            (company-explicit-action-p)))

        (defun company-ac-setup ()
        "Sets up `company-mode' to behave similarly to `auto-complete-mode'."
        (setq company-require-match nil)
        (setq company-auto-complete #'my-company-visible-and-explicit-action-p)
        (setq company-frontends '(company-echo-metadata-frontend
                                    company-pseudo-tooltip-unless-just-one-frontend-with-delay
                                    company-preview-frontend))
        (define-key company-active-map [tab]
            'company-select-next-if-tooltip-visible-or-complete-selection)
        (define-key company-active-map (kbd "TAB")
            'company-select-next-if-tooltip-visible-or-complete-selection)
        )
        (company-ac-setup)
        (setq company-require-match nil)            ; Don't require match, so you can still move your cursor as expected.
        (setq company-tooltip-align-annotations t)  ; Align annotation to the right side.
        (setq company-eclim-auto-save nil)          ; Stop eclim auto save.
        (setq company-dabbrev-downcase nil)         ; No downcase when completion
        (setq company-minimum-prefix-length 1)
        (setq company-idle-delay 0)

        (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
        (advice-add 'company-complete-common :after (lambda ()
                                                        (when (equal my-company-point (point))
                                                        (yas-expand)
                                                        )
                                                    )
        )
    )
    (use-package company-autex
        :after (autex company)
        :config
        (company-autex-init)
    )
    #+END_SRC
** COMMENT Company Fuzzy
   Implement fuzzy search
    #+BEGIN_SRC emacs-lisp
    (use-package company-fuzzy
        :after (company)
        :config
        (global-company-fuzzy-mode 1)
        (setq company-fuzzy-sorting-backend 'alphabetic)
    )
    #+END_SRC
* UI Choices
** COMMENT I3 Settings
    Not using for Now
*** Pop up frames
#+BEGIN_SRC emacs-lisp
(setq pop-up-frames t)
#+END_SRC

** Title Bar
#+BEGIN_SRC emacs-lisp
(use-package diminish
)
(setq frame-title-format "%b")
#+END_SRC
** Window Divider Mode
#+BEGIN_SRC emacs-lisp
(window-divider-mode)
#+END_SRC
** Mouse Avoidance Mode
#+BEGIN_SRC emacs-lisp
(mouse-avoidance-mode 'animate)
#+END_SRC
** Highlight the Current Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
;UI Choices
(use-package all-the-icons)
(use-package doom-modeline
:after (all-the-icons)
:config 
  (doom-modeline-mode)
  (setq doom-modeline-icon t);(display-graphic-p))
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-minor-modes t)
  (setq doom-modeline-checker-simple-format t)
;  (setq doom-modeline-unicode-fallback t)
)
;(require 'powerline)
;(powerline-center-evil-theme)
#+END_SRC
** Visible Bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
** Make Tabs into spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** Scroll Conservatively
When point goes outside the window, Emacs usually recenters the buffer point.
    I’m not crazy about that. This changes scrolling behavior to only scroll as far as point goes.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Tab Width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC
** Prefer Horizontal Buffer Splitting
#+BEGIN_SRC emacs-lisp
;Horizontal splits for temporary buffers
(setq split-height-threshold nil)
(setq split-width-threshold 0)

;(defun split-horizontally-for-temp-buffers ()
;    (when (one-window-p t)
;    (split-window-horizontally)))

;(add-hook 'temp-buffer-window-setup-hook
;    'split-horizontally-for-temp-buffers)
    
#+END_SRC
** Window Size
#+BEGIN_SRC emacs-lisp
;Window Size
(if (window-system)
    (set-frame-size (selected-frame) 500 500))
    
(setq split-width-threshold 0)
(setq split-height-threshold nil)

#+END_SRC
#+BEGIN_SRC emacs-lisp
;Mini Buffer completion
;(icomplete-mode 1)
(use-package ivy
:config (ivy-mode 1)
)
#+END_SRC
** DOOM THEME
    #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
        ;; Global settings (defaults)
     :config
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
        (load-theme 'doom-one t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)

        ;; or for treemacs users
        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config)
    )
    #+END_SRC
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
(use-package centaur-tabs
:config
    (centaur-tabs-mode t)
    (global-set-key (kbd "C-<prior>")  'centaur-tabs-backward)
    (global-set-key (kbd "C-<next>") 'centaur-tabs-forward)

    (defun n () 
        (interactive)
        (centaur-tabs-forward))

    (defun N () 
        (interactive)
        (centaur-tabs-backward))

    (centaur-tabs-headline-match)
    (setq centaur-tabs-style "bar")
    (defun centaur-tabs-buffer-groups ()
        "`centaur-tabs-buffer-groups' control buffers' group rules.

        Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
        All buffer name start with * will group to \"Emacs\".
        Other buffer group by `centaur-tabs-get-group-name' with project name."
        (list
        (cond
        ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
        ;; "Remote")
        ((or (string-equal "*" (substring (buffer-name) 0 1))
        (memq major-mode '(magit-process-mode
        magit-status-mode
        magit-diff-mode
        magit-log-mode
        magit-file-mode
        magit-blob-mode
        magit-blame-mode
        )))
        "Emacs")
        ((memq major-mode '(org-mode
        python-mode
        latex-mode
        javascript-mode
        fundamental-mode
        sh-mode
        org-agenda-clockreport-mode
        org-src-mode
        org-agenda-mode
        org-beamer-mode
        org-indent-mode
        org-bullets-mode
        org-cdlatex-mode
        org-agenda-log-mode
        diary-mode
        ))
        "Work")
        (t
        (centaur-tabs-get-group-name (current-buffer))))))
)
#+END_SRC
 
** COMMENT PopWin
   popwin is a popup window manager for Emacs which makes you free from 
   the hell of annoying buffers such like *Help*, *Completions*, *compilation*, and etc
#+BEGIN_SRC emacs-lisp

(use-package popwin
  :config (popwin-mode 1)
)
#+END_SRC
** Which Key Mode
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
      :diminish which-key-mode
      :config (which-key-mode)
   )
   #+END_SRC
** COMMENT Treemacs
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
   :config 
   (global-set-key "\C-cf" 'treemacs)
   )
   (use-package treemacs-evil
   :after (treemacs evil)
   )
   (use-package treemacs-magit
   :after (treemacs magit)
   )
   (use-package treemacs-all-the-icons
   :after (treemacs all-the-icons)
   )
   (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
   (doom-themes-treemacs-config)
   #+END_SRC
** COMMENT NeoTree
   #+BEGIN_SRC emacs-lisp
   (use-package neotree
   :config
   (global-set-key "\C-cf" 'neotree-toggle)
   (doom-themes-neotree-config)
   )
   #+END_SRC
** Dired Sidebar
   #+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (global-set-key "\C-cd" 'dired-sidebar-toggle-sidebar)
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'icons)
  (setq dired-sidebar-use-custom-font t))
   #+END_SRC
** Rainbow Delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
     :config
       (add-hook 'python-mode-hook #'rainbow-delimiters-mode)
       (add-hook 'latex-mode-hook #'rainbow-delimiters-mode)
     )
   #+END_SRC
* Engine Mode
To search for selected text from emacs
#+BEGIN_SRC emacs-lisp
;Engine Mode
(use-package engine-mode

:config
    (defengine duckduckgo
        "https://duckduckgo.com/?q=%s"
    :keybinding "d")

    (engine-mode t)
    ;use via evil command
    (defalias 'duck 'engine/search-duckduckgo)
)
#+END_SRC
* Python Stuff
** Shorter commands for evil
    #+BEGIN_SRC emacs-lisp
    ;(define-key evil-ex-completion-map "err" 'flymake-goto-next-error)
(defun gd () 
    (interactive)
    (elpy-goto-definition))

(defun doc () 
    (interactive)
    (elpy-doc))
    #+END_SRC
** Folding the code
#+BEGIN_SRC emacs-lisp
(defun hide () 
    (interactive)
    (hs-hide-block))
(defun hideall () 
    (interactive)
    (hs-hide-all))
(defun see () 
    (interactive)
    (hs-show-block))
(defun seeall () 
    (interactive)
    (hs-show-all))
#+END_SRC
** Indendation =4

#+BEGIN_SRC emacs-lisp
(setq python-indent-offset 4)
#+END_SRC
* C/C++ Stuff
** RTags
#+BEGIN_SRC emacs-lisp
  (eval-after-load "cc-mode"
    '(progn
       (define-key c-mode-map   (kbd "C-c C-c") 'compile)
       (define-key c-mode-map   (kbd "") 'comment-region)
       (define-key c++-mode-map (kbd "C-c C-c") 'compile)
       (define-key c++-mode-map   (kbd "") 'comment-region)
     )
  )
#+END_SRC
* Wind Move
Move like the Wind, Shadow fax
#+BEGIN_SRC emacs-lisp
(use-package windmove
:bind (
        ("C-c h" . windmove-left)
        ("C-c l" . windmove-right)
        ("C-c k" .  windmove-up)
        ("C-c j" . windmove-down)
      )
)
#+END_SRC
* Kill Buffer Function
#+BEGIN_SRC emacs-lisp
(defun qq () 
    (interactive)
    (kill-current-buffer))
#+END_SRC

* Org-Mode 
** Evil - Org
#+BEGIN_SRC emacs-lisp
(use-package evil-org
:diminish evil-org-mode
:config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
)
(use-package evil-org-agenda
:config
(evil-org-agenda-set-keys)
)
#+END_SRC
** Basic
#+BEGIN_SRC emacs-lisp

;For Org
(use-package org-bullets
;;For Bullets
:config
    (add-hook 'org-mode-hook
        (lambda ()
        (org-bullets-mode t))
    )
    (setq org-ellipsis " ⤵")
)

;(global-set-key (kbd "<f7>") 'org-agenda)
;(global-set-key (kbd "<f6>") 'org-capture)
(add-hook 'org-capture-mode-hook 'evil-insert-state)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
** Agenda Mode Settings
#+BEGIN_SRC emacs-lisp
    (setq 
    org-agenda-span 'day
    org-agenda-block-separator "-"
    org-agenda-compact-blocks t
    org-agenda-start-with-log-mode t)
#+END_SRC
** Super Org-Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
:config
    (add-hook 'org-mode-hook 'org-super-agenda-mode)
    (setq org-super-agenda-groups
        '(
        (:name "Important"
        ;; Single arguments given alone
        :priority "A")
        (:auto-group t) ; auto seperate groups
        (:auto-tags t) ; Auto seperate tags
        (:habit t)
        )
    )
)
#+END_SRC
* Latex Stuff
#+BEGIN_SRC emacs-lisp
;For Tex
;(require 'tex)
(add-hook 'LaTeX-mode-hook (function turn-on-reftex))
(setq reftex-plug-into-AUCTeX t)
(add-hook 'LaTeX-mode-hook (lambda ()
    (TeX-global-PDF-mode t)
    (flyspell-mode t)
    ;(flymake-mode t)
    (latex-extra-mode 1)
    (prettify-symbols-mode 1)
    (tex-source-correlate-mode)
    (add-hook 'before-save-hook 'TeX-command-run-all nil t)
    ))
    

(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
#+END_SRC
* YAS Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
   :config (yas-global-mode 1)
)

#+END_SRC
* Grammer
#+BEGIN_SRC emacs-lisp
(use-package langtool
  :init 
  (setq langtool-java-classpath
      "/usr/share/languagetool:/usr/share/java/languagetool/*")
  :config 
    (defun langtool-autoshow-detail-popup (overlays)
      (when (require 'popup nil t)
        ;; Do not interrupt current popup
        (unless (or popup-instances
                    ;; suppress popup after type `C-g` .
                    (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
            (popup-tip msg)))))

    (setq langtool-autoshow-message-function
        'langtool-autoshow-detail-popup)
)
#+END_SRC

* Flycheck Mode
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  :config
    (defun err () 
        (interactive)
        (flycheck-next-error))
)

#+END_SRC
* COMMENT Word Count Mode
#+BEGIN_SRC emacs-lisp
; Use word count mode
    (load "wc-mode")
    (wc-mode t)
#+END_SRC
* COMMENT Auto Complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
;((add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(global-auto-complete-mode 1)
(setq-default ac-sources '(ac-source-yasnippet
    ac-source-abbrev
    ac-source-dictionary
    ac-source-words-in-same-mode-buffers))
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
(setq ac-auto-show-menu t)
(setq ac-use-fuzzy t)
(setq ac-show-menu-immediately-on-auto-complete t)
(setq ac-auto-start 2)
#+END_SRC
* COMMENT Create and customize hooks for programming
** highlight paranthesis
#+BEGIN_SRC emacs-lisp
(require 'highlight-paranthesis)
(add-hook emacs-startup-hook 'highlight-paranthesis-mode)
(highlight-leading-spaces-mode)
#+END_SRC
** Highlight leading spaces
#+BEGIN_SRC emacs-lisp
(highlight-leading-spaces-mode)
#+END_SRC
* COMMENT Ledger Mode
    To keep track of money
#+BEGIN_SRC emacs-lisp
(require 'ledger-mode)

;(add-hook 'ledger-mode-hook
    ;'(lambda ()
    ;(when (eq major-mode 'ledger-mode)
    ;(add-hook 'before-save-hook 'ledger-mode-clean-buffer)))
;)
(add-hook 'ledger-mode-hook 'auto-complete-mode)
(add-hook 'ledger-mode-hook 'flymake-mode)
(add-hook 'ledger-mode-hook 'company-mode)

#+END_SRC
